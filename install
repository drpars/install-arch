#!/bin/bash
. ./lib

# Partitions format and mount
echo "Formatting partitions..."
# mkfs.vfat -F32 -n SYSTEM "$targetefi"
mkfs.vfat -F32 -n BOOT "$targetboot"
mkfs.ext4 -L Root -F "$targetroot"
mkfs.ext4 -L Home -F "$targethome"
# first mount root partition
echo "Mounting partitions..."
mount "$targetroot" "$rootmnt" 
mkdir -p "$rootmnt"/{efi,boot,home}
# other mountable partition
mount "$targetefi" "$rootmnt"/efi
mount "$targetboot" "$rootmnt"/boot
mount "$targethome" "$rootmnt"/mnt/home
# Swap file
echo "Creating swapfile..."
dd if=/dev/zero of="$rootmnt"/swapfile bs=1M count=8192 status=progress
chmod 600 "$rootmnt"/swapfile
mkswap "$rootmnt"/swapfile
swapon "$rootmnt"/swapfile

# Pacstrap packs
echo "Pacstrapping..."
pacstrap -K $rootmnt "${pacstrappacks[@]}"

# Config Options
echo "Setting up environment..."
sed -i -e "/^#"$locale"/s/^#//" "$rootmnt"/etc/locale.gen
rm "$rootmnt"/etc/{machine-id,localtime,hostname,shadow,locale.conf} ||
  systemd-firstboot --root "$rootmnt" \
    --keymap="$keymap" --locale="$locale" \
    --locale-messages="$locale" --timezone="$timezone" \
    --hostname="$hostname" --setup-machine-id \
    --welcome=false
arch-chroot "$rootmnt" locale-gen
# Font
# echo "FONT=$font" >>/etc/vconsole.conf

# Create user
echo "Creating local user..."
arch-chroot "$rootmnt" useradd -G wheel -m "$username"
sed -i '/# %wheel ALL=(ALL:ALL) ALL/s/^# //g' "$rootmnt"/etc/sudoers

# Create a basic kernel cmdline
echo "quiet rw" >"$rootmnt"/etc/kernel/cmdline
# Change the HOOKS in mkinitcpio.conf to use systemd hooks
sed -i -e 's/base udev/base systemd/g' "$rootmnt"/etc/mkinitcpio.conf
# Change the preset file to generate a Unified Kernel Image
sed -i \
  -e '/^#ALL_config/s/^#//' \
  -e '/^#default_uki/s/^#//' \
  -e '/^#default_options/s/^#//' \
  -e 's/default_image=/#default_image=/g' \
  -e "s/PRESETS=('default' 'fallback')/PRESETS=('default')/g" \
  "$rootmnt"/etc/mkinitcpio.d/linux.preset

#read the UKI setting and create the folder structure otherwise mkinitcpio will crash
declare $(grep default_uki "$rootmnt"/etc/mkinitcpio.d/linux.preset)
arch-chroot "$rootmnt" mkdir -p "$(dirname "${default_uki//\"/}")"

# Generate fstab
genfstab -U "$rootmnt" >> "$rootmnt"/etc/fstab

#install the gui packages
echo "Installing GUI..."
arch-chroot "$rootmnt" pacman -Sy "${guipacs[@]}" --noconfirm --quiet

# Enable the services we will need on start up
echo "Enabling services..."
systemctl --root "$rootmnt" enable systemd-resolved systemd-timesyncd bluetooth NetworkManager sshd
# Mask systemd-networkd as we will use NetworkManager instead
systemctl --root "$rootmnt" mask systemd-networkd
# Regenerate the ramdisk, this will create our UKI
echo "Generating UKI and installing Boot Loader..."
arch-chroot "$rootmnt" mkinitcpio -p linux
# Secure Boot
echo "Setting up Secure Boot..."
if [[ "$(efivar -d --name 8be4df61-93ca-11d2-aa0d-00e098032b8c-SetupMode)" -eq 1 ]]; then
  arch-chroot "$rootmnt" sbctl create-keys
  arch-chroot "$rootmnt" sbctl enroll-keys -m
  arch-chroot "$rootmnt" sbctl sign -s -o /usr/lib/systemd/boot/efi/systemd-bootx64.efi.signed /usr/lib/systemd/boot/efi/systemd-bootx64.efi
  arch-chroot "$rootmnt" sbctl sign -s "${default_uki//\"/}"
else
  echo "Not in Secure Boot setup mode. Skipping..."
fi
# Install the systemd-boot bootloader
arch-chroot "$rootmnt" bootloaderopts

# Pacman options
pacmanopts
# SSh options
sshopts

# Lock the root account
# arch-chroot "$rootmnt" usermod -L root

echo "-----------------------------------"
echo "- Install complete. Rebooting.... -"
echo "-----------------------------------"
sleep 10
sync
reboot
